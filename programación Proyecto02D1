#include <Servo.h>
#include <avr/io.h>
#include <avr/interrupt.h>

#define SERVOA_PIN 9
#define SERVOB_PIN 10
#define SERVOC_PIN 11
#define SERVOD_PIN 12
#define SERVOE_PIN 13

Servo servoA;
Servo servoB;
Servo servoC;
Servo servoD;
Servo servoE;

void writeAngleToRegister(int address, byte valor) {
  while (EECR & (1 << EEPE));
  EECR = (0 << EEPM1) | (0 << EEPM0);
  EEAR = address;
  EEDR = valor;
  EECR |= (1 << EEMPE);
  EECR |= (1 << EEPE);
}

byte readAngleFromRegister(int address) {
  while (EECR & (1 << EEPE));
  EEAR = address;
  EECR |= (1 << EERE);
  return EEDR;
}

int angle0 = 0;
int angle1 = 0;
int angle2 = 0;
int angle3 = 0;

const byte buttonPin1 = 0;
const byte buttonPin2 = 7;

volatile bool D8_state = LOW;
volatile bool D7_state = LOW;

volatile unsigned long elapsedTime = 0;

const unsigned long interval = 5000;

void setup() {
  DDRD &= ~(1 << DDD2);
  PORTD |= (1 << DDD2);

  DDRD &= ~(1 << DDD3);
  PORTD |= (1 << DDD3);

  DDRD &= ~(1 << DDD4);
  PORTD |= (1 << DDD4);

  DDRD &= ~(1 << DDD5);
  PORTD |= (1 << DDD5);

  DDRD &= ~(1 << DDD6);
  PORTD |= (1 << DDD6);

  DDRB |= (1 << DDB1);
  DDRB |= (1 << DDB2);
  DDRB |= (1 << DDB3);
  DDRB |= (1 << DDB4);
  DDRB |= (1 << DDB5);

  servoA.attach(SERVOA_PIN);
  servoB.attach(SERVOB_PIN);
  servoC.attach(SERVOC_PIN);
  servoD.attach(SERVOD_PIN);
  servoE.attach(SERVOE_PIN);

  servoA.write(90);
  servoB.write(140);
  servoC.write(0);
  servoD.write(0);
  servoE.write(0);

  ADMUX = (1 << REFS0);
  ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);

  DDRB &= ~(1 << DDB0);
  PORTB |= (1 << DDB0);

  DDRD &= ~(1 << DDD7);
  PORTD |= (1 << DDD7);

  PCICR |= B00000100;
  PCMSK2 |= B10000000;
  PCICR |= B00000001;
  PCMSK0 |= B00000001;

  servoA.writeMicroseconds(1000);
  servoB.writeMicroseconds(1000);
  servoC.writeMicroseconds(1000);
  servoD.writeMicroseconds(1000);
  servoE.writeMicroseconds(1000);

  TCCR0A = _BV(WGM01);
  TCCR0B = _BV(CS02);
  OCR0A = 156;
  TIMSK0 |= _BV(OCIE0A);

  sei();

  delay(500);
}

void loop() {
  while (!(PIND & (1 << DDD3))) {
    ADMUX &= 0xF0;
    ADMUX |= 0b00000;
    ADCSRA |= (1 << ADSC);
    while (ADCSRA & (1 << ADSC));

    int potValue = ADC;
    angle0 = map(potValue, 0, 1023, 0, 90);
    servoA.write(angle0);

    if (!(PIND & (1 << DDD2))) {
      writeAngleToRegister(0, angle0);
    }
    delay(200);
  }

  while (!(PIND & (1 << DDD4))) {
    ADMUX &= 0xF0;
    ADMUX |= 0b00001;
    ADCSRA |= (1 << ADSC);
    while (ADCSRA & (1 << ADSC));

    int potValue = ADC;
    angle1 = map(potValue, 0, 1023, 0, 140);
    servoB.write(angle1);

    if (!(PIND & (1 << DDD2))) {
      writeAngleToRegister(1, angle1);
    }

    delay(200);
  }

  while (!(PIND & (1 << DDD5))) {
    ADMUX &= 0xF0;
    ADMUX |= 0b00010;
    ADCSRA |= (1 << ADSC);
    while (ADCSRA & (1 << ADSC));

    int potValue = ADC;
    angle2 = map(potValue, 0, 1023, 0, 120);
    servoC.write(angle2);

    if (!(PIND & (1 << DDD2))) {
      writeAngleToRegister(2, angle2);
    }

    delay(200);
  }

  while (!(PIND & (1 << DDD6))) {
    ADMUX &= 0xF0;
    ADMUX |= 0b00011;
    ADCSRA |= (1 << ADSC);
    while (ADCSRA & (1 << ADSC));

    int potValue = ADC;
    angle3 = map(potValue, 0, 1023, 0, 130);
    servoD.write(angle3);

    if (!(PIND & (1 << DDD2))) {
      writeAngleToRegister(3, angle3);
    }

    delay(200);
  }

  while (!(PIND & (1 << DDD2))) {
    servoA.write(readAngleFromRegister(0));
    servoB.write(readAngleFromRegister(1));
    servoC.write(readAngleFromRegister(2));
    servoD.write(readAngleFromRegister(3));

    delay(200);
  }
}

ISR(PCINT0_vect) {
  if (bit_is_clear(PINB, buttonPin1)) {
    D8_state = !D8_state;

    if (D8_state) {
      servoA.write(0);
      servoB.write(0);
      servoC.write(120);
      servoD.write(130);
      servoE.write(90);
    } else {
      servoA.write(0);
      servoB.write(0);
      servoC.write(0);
      servoD.write(0);
      servoE.write(0);
    }
  }
}

ISR(PCINT2_vect) {
  if (bit_is_clear(PIND, buttonPin2)) {
    D7_state = !D7_state;

    if (D7_state) {
      servoA.write(0);
      servoB.write(0);
      servoC.write(0);
      servoD.write(0);
      servoE.write(90);
    } else {
      servoA.write(0);
      servoB.write(0);
      servoC.write(0);
      servoD.write(0);
      servoE.write(0);
    }
  }
}

ISR(TIMER0_COMPA_vect) {
  elapsedTime += 1;

  if (elapsedTime >= interval) {
    elapsedTime = 0;

    servoA.write(90);
    servoB.write(140);
    servoC.write(0);
    servoD.write(0);
    servoE.write(0);
  }
}

