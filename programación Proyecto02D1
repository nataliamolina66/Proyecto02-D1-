ADMUX = (1 << REFS0);
ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);

void loop() {
  // Definir que si se presiona el botón PD3 debe leerse el valor del potenciómetro analógico utilizando registros de pines
// Definir que si se presiona el botón PD3 debe leerse el valor del potenciómetro analógico utilizando registros de pines
  while (!(PIND & (1 << DDD3))) {

    // Conversión ADC para potenciómetros 
    ADMUX &= 0xF0; // Limpieza de los bits MUX
    ADMUX |= 0b00000;  // Pin A0
    ADCSRA |= (1 << ADSC);  // Iniciar la conversión de la entrada analógica a digital
    while (ADCSRA & (1 << ADSC)); // Esperar a que la conversión termine

    // Leer el valor ADC del potenciómetro
    int potValue0 = ADC; 

    // Utilizar una función de mapeo para controlar la posición del servomotor en función de la entrada analógica del potenciómetro 
    angle0 = map(potValue0, 0, 1023, 0, 90);
    servoA.write(angle0);

    if (!(PIND & (1 << DDD2))) {
      writeAngleToRegister(0, angle0);
    }
    delay(200);
  

  // Definir que si se presiona el botón PD4 debe leerse el valor del potenciómetro analógico utilizando registros de pines
    // Conversión ADC para potenciómetros 
    ADMUX &= 0xF0; // Limpieza de los bits MUX
    ADMUX |= 0b00001;  // Pin A1
    ADCSRA |= (1 << ADSC);  // Iniciar la conversión de la entrada analógica a digital
    while (ADCSRA & (1 << ADSC)); // Esperar a que la conversión termine

    // Leer el valor ADC del potenciómetro
    int potValue1 = ADC; 

    // Utilizar una función de mapeo para controlar la posición del servomotor en función de la entrada analógica del potenciómetro 
    angle1 = map(potValue1, 0, 1023, 0, 140);
    servoB.write(angle1);

    if (!(PIND & (1 << DDD2))) {
      writeAngleToRegister(1, angle1);
    }

    delay(200);
  
  // Definir que si se presiona el botón PD5 debe leerse el valor del potenciómetro analógico utilizando registros de pines
    // Conversión ADC para potenciómetros 
    ADMUX &= 0xF0; // Limpieza de los bits MUX
    ADMUX |= 0b00010;  // Pin A2
    ADCSRA |= (1 << ADSC);  // Iniciar la conversión de la entrada analógica a digital
    while (ADCSRA & (1 << ADSC)); // Esperar a que la conversión termine

    // Leer el valor ADC del potenciómetro
    int potValue2 = ADC; 

    // Utilizar una función de mapeo para controlar la posición del servomotor en función de la entrada analógica del potenciómetro 
    angle2 = map(potValue2, 0, 1023, 0, 120);
    servoC.write(angle2);

    if (!(PIND & (1 << DDD2))) {
      writeAngleToRegister(2, angle2);
    }

    delay(200);

// Definir que si se presiona el botón PD6 debe leerse el valor del potenciómetro analógico utilizando registros de pines
    // Conversión ADC para potenciómetros 
    ADMUX &= 0xF0; // Limpieza de los bits MUX
    ADMUX |= 0b00011;  // Pin A3
    ADCSRA |= (1 << ADSC);  // Iniciar la conversión de la entrada analógica a digital
    while (ADCSRA & (1 << ADSC)); // Esperar a que la conversión termine

    // Leer el valor ADC del potenciómetro
    int potValue3 = ADC; 

    // Utilizar una función de mapeo para controlar la posición del servomotor en función de la entrada analógica del potenciómetro 
    angle3 = map(potValue3, 0, 1023, 0, 130);
    servoD.write(angle3);

    if (!(PIND & (1 << DDD2))) {
      writeAngleToRegister(3, angle3);
    }

    delay(200);
  }
    }
